C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FUNCTION_GENERATOR
OBJECT MODULE PLACED IN .\src\function_generator.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Yvette 
                    -Wang\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGenerator_2\src\function_generator.c OMF2 SMALL DEBUG OBJECTEXTEND RO
                    -M(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Y
                    -vette Wang\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGenerator_2\inc;C:\Users\Yvette Wang\SimplicityStudio\v4_worksp
                    -ace\EFM8BB3_FunctionGenerator_2\inc\config;C:\Users\Yvette Wang\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGenerator_
                    -2\inc\graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/Si
                    -liconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/s
                    -dks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/comm
                    -on/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_m
                    -emory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lc
                    -d/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicitySt
                    -udio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0
                    -.3//Device/EFM8BB3/inc) REGFILE(EFM8BB3_FunctionGenerator_2.ORC) PRINT(.\src\function_generator.lst) COND PAGEWIDTH(120)
                    - PAGELENGTH(65) OBJECT(.\src\function_generator.OBJ)

line level    source

   1          ///////////////////////////////////////////////////////////////////////////////
   2          // Includes
   3          ///////////////////////////////////////////////////////////////////////////////
   4          
   5          #include "bsp.h"
   6          #include "tick.h"
   7          #include "disp.h"
   8          #include "render.h"
   9          #include "joystick.h"
  10          #include "thinfont.h"
  11          #include "function_generator.h"
  12          #include "sine.h"
  13          #include "square.h"
  14          #include "triangle.h"
  15          #include "sawtooth.h"
  16          #include "windowed_sine.h"
  17          #include "nav_up.h"
  18          #include "nav_down.h"
  19          #include "nav_left.h"
  20          #include "nav_right.h"
  21          #include "waveform_tables.h"
  22          #include "retargetserial.h"
  23          #include <string.h>
  24          #include <stdlib.h>
  25          
  26          ///////////////////////////////////////////////////////////////////////////////
  27          // Globals
  28          ///////////////////////////////////////////////////////////////////////////////
  29          
  30          bool JN, JS;
  31          int sw=0;
  32          uint8_t i;
  33          uint8_t x=0;
  34          uint8_t y=0;
  35          uint8_t j;
  36          uint8_t k=0;
  37          uint8_t flag;
  38          char xdata text1[17];
  39          char xdata input1[200][17];
  40          //char xdata input2[128];
  41          //char xdata input2[16];
  42          unsigned char inputchar;      // Used to store character from UART
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 2   

  43          
  44          // Generic line buffer
  45          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  46          
  47          // Demo state variables
  48          static DemoState currentDemoState = DEMO_SINE;
  49          static SI_VARIABLE_SEGMENT_POINTER(currentTable, uint16_t, const SI_SEG_CODE) = sineTable; // current wave
             -form table for DAC output
  50          static SI_VARIABLE_SEGMENT_POINTER(currentWaveform, uint8_t, const SI_SEG_CODE) = sine_bits; // current wa
             -veform picture
  51          
  52          // Frequency selection
  53          #define SUPPORTED_NUM_FREQ 8
  54          static SI_SEGMENT_VARIABLE(frequency[SUPPORTED_NUM_FREQ], uint16_t, SI_SEG_XDATA) = {
  55                          10L,
  56                          20L,
  57                          50L,
  58                          100L,
  59                          200L,
  60                          500L,
  61                          1000L,
  62                          2000L
  63          };
  64          
  65          // Current Frequency Selection
  66          static uint8_t currentFreqIndex = 3;
  67          
  68          // Phase offset (updated when frequency is changed)
  69          static uint16_t phaseOffset = 100 * PHASE_PRECISION / SAMPLE_RATE_DAC;
  70          
  71          // Kill splash
  72          KillSpash killSplashFlag = SHOW_SPLASH;
  73          
  74          ///////////////////////////////////////////////////////////////////////////////
  75          // Supporting Functions
  76          ///////////////////////////////////////////////////////////////////////////////
  77          
  78          //-----------------------------------------------------------------------------
  79          // transitionDemoWaveform
  80          //-----------------------------------------------------------------------------
  81          //
  82          // Change function/waveform.
  83          // Left  - change function order: sine < square < triangle < sawtooth < windowed sine
  84          // Right - change function order: sine > square > triangle > sawtooth > windowed sine
  85          //
  86          // dir - valid arguments are: JOYSTICK_E, JOYSTICK_W
  87          //
  88          static void transitionDemoWaveform(uint8_t dir)
  89          {
  90   1        if (dir == JOYSTICK_E)
  91   1        {
  92   2                switch (currentDemoState)
  93   2                {
  94   3                      case DEMO_SINE:
  95   3                        currentDemoState = DEMO_SQUARE;
  96   3                        currentWaveform = square_bits;
  97   3                        currentTable = squareTable;
  98   3                        break;
  99   3      
 100   3                      case DEMO_SQUARE:
 101   3                        currentDemoState = DEMO_TRIANGLE;
 102   3                        currentWaveform = triangle_bits;
 103   3                        currentTable = triangleTable;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 3   

 104   3                        break;
 105   3      
 106   3                      case DEMO_TRIANGLE:
 107   3                currentDemoState = DEMO_SAWTOOTH;
 108   3                        currentWaveform = sawtooth_bits;
 109   3                        currentTable = sawtoothTable;
 110   3                        break;
 111   3      
 112   3                      case DEMO_SAWTOOTH:
 113   3                        currentDemoState = DEMO_WINDOWED_SINE;
 114   3                        currentWaveform = windowed_sine_bits;
 115   3                        currentTable = windowedSineTable;
 116   3                        break;
 117   3      
 118   3                      case DEMO_WINDOWED_SINE:
 119   3                        currentDemoState = DEMO_SINE;
 120   3                        currentWaveform = sine_bits;
 121   3                        currentTable = sineTable;
 122   3                        break;
 123   3                }
 124   2        }
 125   1        else if (dir == JOYSTICK_W)
 126   1        {
 127   2                switch (currentDemoState)
 128   2                {
 129   3                      case DEMO_SINE:
 130   3                        currentDemoState = DEMO_WINDOWED_SINE;
 131   3                        currentWaveform = windowed_sine_bits;
 132   3                        currentTable = windowedSineTable;
 133   3                        break;
 134   3      
 135   3                      case DEMO_SQUARE:
 136   3                        currentDemoState = DEMO_SINE;
 137   3                        currentWaveform = sine_bits;
 138   3                        currentTable = sineTable;
 139   3                        break;
 140   3      
 141   3                      case DEMO_TRIANGLE:
 142   3                        currentDemoState = DEMO_SQUARE;
 143   3                        currentWaveform = square_bits;
 144   3                        currentTable = squareTable;
 145   3                        break;
 146   3      
 147   3                      case DEMO_SAWTOOTH:
 148   3                        currentDemoState = DEMO_TRIANGLE;
 149   3                        currentWaveform = triangle_bits;
 150   3                        currentTable = triangleTable;
 151   3                        break;
 152   3      
 153   3                      case DEMO_WINDOWED_SINE:
 154   3                        currentDemoState = DEMO_SAWTOOTH;
 155   3                        currentWaveform = sawtooth_bits;
 156   3                        currentTable = sawtoothTable;
 157   3                        break;
 158   3                }
 159   2        }
 160   1      }
 161          
 162          //-----------------------------------------------------------------------------
 163          // transitionDemoFrequency
 164          //-----------------------------------------------------------------------------
 165          //
 166          // Change frequency of the function.
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 4   

 167          // Up   - increase frequency
 168          // Down - decrease frequency
 169          //
 170          // dir - valid arguments are: JOYSTICK_N, JOYSTICK_S
 171          //
 172          static void transitionDemoFrequency(uint8_t dir)
 173          {
 174   1        if (dir == JOYSTICK_N)
 175   1        {
 176   2                // increase freq
 177   2                if(currentFreqIndex == SUPPORTED_NUM_FREQ-1)
 178   2                {
 179   3                        currentFreqIndex = 0;
 180   3                }
 181   2                else
 182   2                {
 183   3                        currentFreqIndex++;
 184   3                }
 185   2        }
 186   1        else if (dir == JOYSTICK_S)
 187   1        {
 188   2                // decrease freq
 189   2                if (currentFreqIndex == 0)
 190   2                {
 191   3                        currentFreqIndex = SUPPORTED_NUM_FREQ-1;
 192   3                }
 193   2                else
 194   2                {
 195   3                        currentFreqIndex--;
 196   3                }
 197   2        }
 198   1      
 199   1        phaseOffset = frequency[currentFreqIndex] * PHASE_PRECISION / SAMPLE_RATE_DAC;
 200   1      }
 201          
 202          
 203          //-----------------------------------------------------------------------------
 204          // getJoystick
 205          //-----------------------------------------------------------------------------
 206          //
 207          // Get new ADC sample and return joystick direction. Valid return values:
 208          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 209          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 210          //
 211          static uint8_t getJoystick(void)
 212          {
 213   1        uint32_t mv;
 214   1        uint8_t dir;
 215   1      
 216   1        ADC0CN0_ADBUSY = 1;
 217   1        while (!ADC0CN0_ADINT);
 218   1        ADC0CN0_ADINT = 0;
 219   1      
 220   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
 221   1      
 222   1        dir = JOYSTICK_convert_mv_to_direction(mv);
 223   1      
 224   1        return dir;
 225   1      }
 226          
 227          //-----------------------------------------------------------------------------
 228          // getWaitJoystick
 229          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 5   

 230          //
 231          // Get joystick input. If joystick was moved, wait for release. Return joystick
 232          // direction. Valid return values:
 233          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 234          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 235          //
 236          static uint8_t getWaitJoystick(void)
 237          {
 238   1        uint8_t dir, dirSave;
 239   1      
 240   1        dir = getJoystick();
 241   1        dirSave = dir;
 242   1      
 243   1        // wait for release then transition
 244   1        while (dir != JOYSTICK_NONE)
 245   1        {
 246   2          dir = getJoystick();
 247   2        }
 248   1      
 249   1        return dirSave;
 250   1      }
 251          
 252          //-----------------------------------------------------------------------------
 253          // getJoystickDemo
 254          //-----------------------------------------------------------------------------
 255          //
 256          // Get and process joystick input.
 257          // Left/Right = change function/waveform
 258          // Up/Down    = change frequency
 259          //
 260          static void processInput(uint8_t dir)
 261          {
 262   1        // process input
 263   1        if ((dir == JOYSTICK_E) || (dir == JOYSTICK_W))
 264   1        {
 265   2          transitionDemoWaveform(dir);
 266   2        }
 267   1        else if ((dir == JOYSTICK_N) || (dir == JOYSTICK_S))
 268   1        {
 269   2          transitionDemoFrequency(dir);
 270   2        }
 271   1      }
 272          
 273          //-----------------------------------------------------------------------------
 274          // drawScreenText
 275          //-----------------------------------------------------------------------------
 276          //
 277          // Show one line of text on the screen
 278          //
 279          // str - pointer to string text (0 - 21 characters) to display
 280          // rowNum - row number of the screen (0 - 127)
 281          // fontScale - font scaler (1 - 4)
 282          //
 283          static void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum)
 284          {
 285   1        uint8_t i;
 286   1      
 287   1        for (i = 0; i < FONT_HEIGHT; i++)
 288   1        {
 289   2          RENDER_ClrLine(Line);
 290   2          RENDER_StrLine(Line, 4, i, str);
 291   2          DISP_WriteLine(rowNum + i, Line);
 292   2        }
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 6   

 293   1      }
 294          static void drawScreenText1(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum, uint8_
             -t colNum)
 295          {
 296   1        uint8_t i;
 297   1      
 298   1        for (i = 0; i < FONT_HEIGHT; i++)
 299   1        {
 300   2          RENDER_ClrLine(Line);
 301   2          RENDER_StrLine(Line, colNum, i, str);
 302   2          DISP_WriteLine(rowNum + i, Line);
 303   2        }
 304   1      }
 305          //-----------------------------------------------------------------------------
 306          // drawScreenSprite
 307          //-----------------------------------------------------------------------------
 308          //
 309          // Displays a sprite on the screen
 310          //
 311          // sprite - pointer to sprite/picture
 312          // width  - width of sprite
 313          // height - height of sprite
 314          // xPos - beginning row number on the screen (0 - 127)
 315          // yPos - beginning col number on the screen (0 - 127)
 316          //
 317          static void drawScreenSprite(SI_VARIABLE_SEGMENT_POINTER(sprite, uint8_t, RENDER_SPRITE_SEG),
 318                                               uint8_t width, uint8_t height,
 319                                               uint8_t xPos, uint8_t yPos)
 320          {
 321   1        uint8_t i;
 322   1      
 323   1        for (i = 0; i < height; i++)
 324   1        {
 325   2          RENDER_ClrLine(Line);
 326   2          RENDER_SpriteLine(Line, xPos, i, sprite, width);
 327   2          DISP_WriteLine(yPos + i, Line);
 328   2        }
 329   1      }
 330          
 331          //-----------------------------------------------------------------------------
 332          // drawScreenWaveform
 333          //-----------------------------------------------------------------------------
 334          //
 335          // Draw screen waveform and left/right arrows
 336          //
 337          static void drawScreenWaveform(void)
 338          {
 339   1        uint8_t i; // row index for waveform sprite
 340   1        uint8_t j = 0; // row index for nav sprites
 341   1      
 342   1        for (i = 0; i < sine_height; i++)
 343   1        {
 344   2              RENDER_ClrLine(Line);
 345   2              RENDER_SpriteLine(Line, X_POS_WAVEFORM, i, currentWaveform, sine_width);
 346   2      
 347   2              if ((i >= Y_POS_NAV_ARROW_LEFT_RIGHT) && (i < Y_POS_NAV_ARROW_LEFT_RIGHT + nav_left_height))
 348   2              {
 349   3                RENDER_SpriteLine(Line, X_POS_NAV_ARROW_LEFT, j, nav_left_bits, nav_left_width);
 350   3                RENDER_SpriteLine(Line, X_POS_NAV_ARROW_RIGHT, j, nav_right_bits, nav_right_width);
 351   3                j++;
 352   3              }
 353   2              DISP_WriteLine(Y_POS_WAVEFORM + i, Line);
 354   2        }
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 7   

 355   1      
 356   1      }
 357          
 358          static void drawScreenFrequency(void)
 359          {
 360   1        char freqStr[22];
 361   1      
 362   1        // display frequency on screen
 363   1        RETARGET_SPRINTF(freqStr, "     f = %d Hz", frequency[currentFreqIndex]);
 364   1      
 365   1        drawScreenText(freqStr, Y_POS_FREQ);
 366   1      }
 367          
 368          //-----------------------------------------------------------------------------
 369          // drawScreenStaticSprites
 370          //-----------------------------------------------------------------------------
 371          //
 372          // Draw static/non-changing sprites on screen. Static sprites are up and down
 373          // arrows. Left/right arrows are drawn with waveform.
 374          //
 375          static void drawScreenStaticSprites(void)
 376          {
 377   1        drawScreenSprite(nav_up_bits, nav_up_width, nav_up_height,
 378   1                                 X_POS_NAV_ARROW_UP_DOWN, Y_POS_NAV_ARROW_UP);
 379   1        drawScreenSprite(nav_down_bits, nav_down_width, nav_down_height,
 380   1                                 X_POS_NAV_ARROW_UP_DOWN, Y_POS_NAV_ARROW_DOWN);
 381   1      }
 382          
 383          //-----------------------------------------------------------------------------
 384          // drawScreen
 385          //-----------------------------------------------------------------------------
 386          //
 387          // Draw dynamic/changeable sprites and info (waveform and frequency) on screen.
 388          //
 389          static void drawScreen(void)
 390          {
 391   1        drawScreenWaveform();
 392   1        drawScreenFrequency();
 393   1      }
 394          
 395          //-----------------------------------------------------------------------------
 396          // synchFrame
 397          //-----------------------------------------------------------------------------
 398          //
 399          // Delay until start of next frame
 400          //
 401          static void synchFrame(void)
 402          {
 403   1        static uint16_t lastTick = 0;
 404   1        uint16_t tick;
 405   1      
 406   1        // Render at 50 Hz
 407   1        while (((tick = GetTickCount()) - lastTick) < HZ_TO_MS(DEMO_FRAME_RATE));
 408   1        lastTick = tick;
 409   1      }
 410          
 411          ///////////////////////////////////////////////////////////////////////////////
 412          // Interrupt Service Routines
 413          ///////////////////////////////////////////////////////////////////////////////
 414          
 415          SI_INTERRUPT_USING (TIMER4_ISR, TIMER4_IRQn, 1)
 416          {
 417   1        static uint16_t phaseAcc = 0;       // Holds phase accumulator
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 8   

 418   1      
 419   1        SI_UU16_t temp;   // The temporary value that holds
 420   1                                                                                // value before being written
 421   1                                                                                // to the DAC
 422   1      
 423   1        TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;    // Clear Timer4 overflow flag
 424   1      
 425   1        phaseAcc += phaseOffset;            // Increment phase accumulator
 426   1      
 427   1        // Read the table value
 428   1        temp.u16 = currentTable[phaseAcc >> 8];
 429   1      
 430   1        // Set the value of <temp> to the next output of DAC at full-scale
 431   1        // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 432   1        // written first.
 433   1      
 434   1        SFRPAGE = PG4_PAGE;
 435   1      
 436   1        DAC1L = DAC0L = temp.u8[LSB];
 437   1        DAC1H = DAC0H = temp.u8[MSB];
 438   1      }
 439          //
 440          ////-----------------------------------------------------------------------------
 441          //// PMATCH_ISR
 442          ////-----------------------------------------------------------------------------
 443          ////
 444          //// The Port Match interrupt occurs whenever (Pn & PnMASK) != (PnMAT & PnMASK).
 445          //// We must disable the interrupt and wait until the button is released in
 446          //// main, or else the interrupt will trigger multiple times.  It is generally
 447          //// not good practice to sit in an ISR for int32_t periods of time.
 448          ////
 449          //SI_INTERRUPT(PMATCH_ISR, PMATCH_IRQn)
 450          //{
 451          //  uint8_t SFRPAGE_save = SFRPAGE;
 452          //
 453          //  // Kill splash and run demo if user presses any button
 454          //  if((BSP_PB0 == BSP_PB_PRESSED) || (BSP_PB1 == BSP_PB_PRESSED))
 455          //  {
 456          //        killSplashFlag = KILL_SPLASH;
 457          //  }
 458          //
 459          //  SFRPAGE = PG2_PAGE;
 460          //
 461          //  EIE1 &= ~0x02;                     // Disable Port Match interrupts to
 462          //                                     // prevent multiple interrupts from
 463          //                                     // occurring while the button is
 464          //                                     // pressed
 465          //  SFRPAGE = SFRPAGE_save;
 466          //}
 467          void scollup(int pos,int end)
 468          {
 469   1              DISP_ClearAll();
 470   1              if (pos!=0)
 471   1              {
 472   2                      int index;
 473   2                      int temp=pos;
 474   2                      if(end-pos+1>=16){
 475   3                              for (index=0;pos<(temp+16);index++){
 476   4                                      sprintf(text1,"%s",input1[pos-1]);
 477   4                                      drawScreenText1(text1,8*index,0);
 478   4                                      pos++;
 479   4                              }
 480   3                      }
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 9   

 481   2                      else{
 482   3                              for (index=0;pos<end;index++){
 483   4                                      sprintf(text1,"%s",input1[pos-1]);
 484   4                                      drawScreenText1(text1,8*index,0);
 485   4                                      pos++;
 486   4                              }
 487   3                      }
 488   2                      pos=temp-1;
 489   2              }
 490   1      }
 491          void scolldown(int pos,int end)
 492          {
 493   1              int index;
 494   1                      int temp=pos;
 495   1                      DISP_ClearAll();
 496   1                      if(end-pos+1>16){
 497   2                              for (index=0;pos<(temp+16);index++){
 498   3                                      pos++;
 499   3                                      sprintf(text1,"%s",input1[pos]);
 500   3                                      drawScreenText1(text1,8*index,0);
 501   3                              }
 502   2                      }
 503   1                      else{
 504   2                              for (index=0;pos<end;index++){
 505   3                                      pos++;
 506   3                                      sprintf(text1,"%s",input1[pos]);
 507   3                                      drawScreenText1(text1,8*index,0);
 508   3                              }
 509   2                      }
 510   1      
 511   1                      pos=temp+1;
 512   1      }
 513          SI_INTERRUPT (PMATCH_ISR, PMATCH_IRQn) {
 514   1              uint8_t dir =getJoystick();
 515   1              if (dir == JOYSTICK_N) {
 516   2                      //get line up
 517   2                      JN=true;
 518   2              }
 519   1              else if (dir == JOYSTICK_S) {
 520   2                      JS=true;
 521   2              }
 522   1      ///////////////////////////////////////////////////////////////////////////////
 523   1      // Driver Function
 524   1      ///////////////////////////////////////////////////////////////////////////////
 525   1      
 526   1      void FunctionGenerator_main(void)
*** ERROR C141 IN LINE 526 OF C:\Users\Yvette Wang\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGenerator_2\src\functio
             -n_generator.c: syntax error near 'void'
 527   1      {
 528   1        //drawSplash();
 529   1              text1[16]=0;
 530   1              //inputchar[1]=0;
 531   1        //DISP_ClearAll();
 532   1       // drawScreenStaticSprites();
 533   1      
 534   1        while(1)
 535   1        {
 536   2          //processInput(getWaitJoystick());
 537   2          //drawScreen();
 538   2          //synchFrame();
 539   2      
 540   2                while(i<200){
 541   3                        if(i<16)
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/06/2017 16:13:26 PAGE 10  

 542   3                        {
 543   4                                for(i=0;i<16;i++)
 544   4                                        {
 545   5                                                for(j=0;j<16;j++)
 546   5                                                {
 547   6                                                        input1[i][j]=NULL;
 548   6                                                        input1[i][16]=0;
 549   6                                                }
 550   5                                                sprintf(text1,"");
 551   5                                                for(j=0;j<16;j++)
 552   5                                                {
 553   6                                                inputchar = getchar();
 554   6                                                input1[i][j]=inputchar;
 555   6                                                sprintf(text1,"%s",input1[i]);
 556   6                                                drawScreenText1(text1,8*i,0);
 557   6                                                flag=i;
 558   6                                                }
 559   5                                                RETARGET_PRINTF ("\n");
 560   5                                        }
 561   4                                k=1;
 562   4                        }
 563   3                        if(i>=16)
 564   3                                {
 565   4                                        DISP_ClearAll();
 566   4                                        k++;
 567   4                                        for(;i<k*16;i++){
 568   5                                        for(j=0;j<16;j++)
 569   5                                        {
 570   6                                                input1[i][j]=NULL;
 571   6                                                input1[i][16]=0;
 572   6                                        }
 573   5                                        sprintf(text1,"");
 574   5                                        for(j=0;j<16;j++)
 575   5                                        {
 576   6                                        inputchar = getchar();
 577   6                                        input1[i][j]=inputchar;
 578   6                                        sprintf(text1,"%s",input1[i]);
 579   6                                        drawScreenText1(text1,8*(i-(k-1)*16),0);
 580   6                                        }
 581   5                                        RETARGET_PRINTF ("\n");
 582   5                                        }
 583   4                                }
 584   3                              if (flag >16){          //enables multiple laps
 585   4                                      EIE1 |=0x02;  //re enable
 586   4                              }
 587   3                }
 588   2        }
 589   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
