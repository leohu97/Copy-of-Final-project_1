C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FUNCTION_GENERATOR
OBJECT MODULE PLACED IN .\src/function_generator.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/src/function_generator.c OMF2 SMALL DEBUG OBJECTEXTEND R
                    -OM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/lia
                    -ohu/SimplicityStudio/v4_workspace/Final project_1/inc/graphics;/Users/liaohu/SimplicityStudio/v4_workspace/Final project
                    -_1/inc;/Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/inc/config;/Applications/Simplicity Studio.app/Conten
                    -ts/Eclipse/developer/sdks/8051/v4.0.3//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sd
                    -ks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/
                    -v4.0.3//Device/EFM8BB3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4
                    -.0.3//kits/common/drivers/efm8_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3/
                    -/kits/common/drivers/efm8_memory_lcd/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3
                    -//kits/common/drivers/efm8_memory_lcd/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8
                    -051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/develope
                    -r/sdks/8051/v4.0.3//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4
                    -.0.3//Device/EFM8BB3/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/dr
                    -ivers/efm8_retargetserial) PRINT(.\src/function_generator.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/function_
                    -generator.OBJ)

line level    source

   1          ///////////////////////////////////////////////////////////////////////////////
   2          // Includes
   3          ///////////////////////////////////////////////////////////////////////////////
   4          
   5          #include "bsp.h"
   6          #include "tick.h"
   7          #include "disp.h"
   8          #include "render.h"
   9          #include "joystick.h"
  10          #include "thinfont.h"
  11          #include "function_generator.h"
  12          #include "sine.h"
  13          #include "square.h"
  14          #include "triangle.h"
  15          #include "sawtooth.h"
  16          #include "windowed_sine.h"
  17          #include "nav_up.h"
  18          #include "nav_down.h"
  19          #include "nav_left.h"
  20          #include "nav_right.h"
  21          #include "waveform_tables.h"
  22          #include "retargetserial.h"
  23          #include <string.h>
  24          #include <stdlib.h>
  25          
  26          ///////////////////////////////////////////////////////////////////////////////
  27          // Globals
  28          ///////////////////////////////////////////////////////////////////////////////
  29          SI_SBIT(LED1, SFR_P1, 4);
  30          SI_SBIT(LED2, SFR_P1, 5);
  31          SI_SBIT(BTR, SFR_P0, 2);
  32          SI_SBIT(BTL, SFR_P0, 3);
  33          bool JN, JS;
  34          int itrp=0;
  35          uint8_t i;
  36          uint8_t x=0;
  37          uint8_t y=0;
  38          uint8_t j;
  39          uint8_t k=0;
  40          uint8_t flag;
  41          uint8_t ori;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 2   

  42          char xdata text1[17];
  43          char xdata input1[50][22];
  44          unsigned char inputchar;      // Used to store character from UART
  45          
  46          // Generic line buffer
  47          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  48          
  49          // Demo state variables
  50          static DemoState currentDemoState = DEMO_SINE;
  51          static SI_VARIABLE_SEGMENT_POINTER(currentTable, uint16_t, const SI_SEG_CODE) = sineTable; // current wave
             -form table for DAC output
  52          static SI_VARIABLE_SEGMENT_POINTER(currentWaveform, uint8_t, const SI_SEG_CODE) = sine_bits; // current wa
             -veform picture
  53          
  54          // Frequency selection
  55          #define SUPPORTED_NUM_FREQ 8
  56          static SI_SEGMENT_VARIABLE(frequency[SUPPORTED_NUM_FREQ], uint16_t, SI_SEG_XDATA) = {
  57                          10L,
  58                          20L,
  59                          50L,
  60                          100L,
  61                          200L,
  62                          500L,
  63                          1000L,
  64                          2000L
  65          };
  66          
  67          // Current Frequency Selection
  68          static uint8_t currentFreqIndex = 3;
  69          
  70          // Phase offset (updated when frequency is changed)
  71          static uint16_t phaseOffset = 100 * PHASE_PRECISION / SAMPLE_RATE_DAC;
  72          
  73          // Kill splash
  74          KillSpash killSplashFlag = SHOW_SPLASH;
  75          
  76          ///////////////////////////////////////////////////////////////////////////////
  77          // Supporting Functions
  78          ///////////////////////////////////////////////////////////////////////////////
  79          
  80          
  81          //-----------------------------------------------------------------------------
  82          // getJoystick
  83          //-----------------------------------------------------------------------------
  84          //
  85          // Get new ADC sample and return joystick direction. Valid return values:
  86          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
  87          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
  88          //
  89          static uint8_t getJoystick(void)
  90          {
  91   1        uint32_t mv;
  92   1        uint8_t dir;
  93   1      
  94   1        ADC0CN0_ADBUSY = 1;
  95   1        while (!ADC0CN0_ADINT);
  96   1        ADC0CN0_ADINT = 0;
  97   1      
  98   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
  99   1      
 100   1        dir = JOYSTICK_convert_mv_to_direction(mv);
 101   1      
 102   1        return dir;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 3   

 103   1      }
 104          
 105          //-----------------------------------------------------------------------------
 106          // getWaitJoystick
 107          //-----------------------------------------------------------------------------
 108          //
 109          // Get joystick input. If joystick was moved, wait for release. Return joystick
 110          // direction. Valid return values:
 111          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 112          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 113          //
 114          static uint8_t getWaitJoystick(void)
 115          {
 116   1        uint8_t dir, dirSave;
 117   1      
 118   1        dir = getJoystick();
 119   1        dirSave = dir;
 120   1      
 121   1        // wait for release then transition
 122   1        while (dir != JOYSTICK_NONE)
 123   1        {
 124   2          dir = getJoystick();
 125   2        }
 126   1      
 127   1        return dirSave;
 128   1      }
 129          
 130          
 131          //-----------------------------------------------------------------------------
 132          // drawScreenText
 133          //-----------------------------------------------------------------------------
 134          //
 135          // Show one line of text on the screen
 136          //
 137          // str - pointer to string text (0 - 21 characters) to display
 138          // rowNum - row number of the screen (0 - 127)
 139          // fontScale - font scaler (1 - 4)
 140          //
 141          static void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum)
 142          {
 143   1        uint8_t i;
 144   1      
 145   1        for (i = 0; i < FONT_HEIGHT; i++)
 146   1        {
 147   2          RENDER_ClrLine(Line);
 148   2          RENDER_StrLine(Line, 4, i, str);
 149   2          DISP_WriteLine(rowNum + i, Line);
 150   2        }
 151   1      }
 152          static void drawScreenText1(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum, uint8_
             -t colNum)
 153          {
 154   1        uint8_t i;
 155   1      
 156   1        for (i = 0; i < FONT_HEIGHT; i++)
 157   1        {
 158   2          RENDER_ClrLine(Line);
 159   2          RENDER_StrLine(Line, colNum, i, str);
 160   2          DISP_WriteLine(rowNum + i, Line);
 161   2        }
 162   1      }
 163          //-----------------------------------------------------------------------------
 164          // drawScreenSprite
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 4   

 165          //-----------------------------------------------------------------------------
 166          //
 167          // Displays a sprite on the screen
 168          //
 169          // sprite - pointer to sprite/picture
 170          // width  - width of sprite
 171          // height - height of sprite
 172          // xPos - beginning row number on the screen (0 - 127)
 173          // yPos - beginning col number on the screen (0 - 127)
 174          //
 175          static void drawScreenSprite(SI_VARIABLE_SEGMENT_POINTER(sprite, uint8_t, RENDER_SPRITE_SEG),
 176                                               uint8_t width, uint8_t height,
 177                                               uint8_t xPos, uint8_t yPos)
 178          {
 179   1        uint8_t i;
 180   1      
 181   1        for (i = 0; i < height; i++)
 182   1        {
 183   2          RENDER_ClrLine(Line);
 184   2          RENDER_SpriteLine(Line, xPos, i, sprite, width);
 185   2          DISP_WriteLine(yPos + i, Line);
 186   2        }
 187   1      }
 188          
 189          
 190          
 191          ///////////////////////////////////////////////////////////////////////////////
 192          // Interrupt Service Routines
 193          ///////////////////////////////////////////////////////////////////////////////
 194          
 195          SI_INTERRUPT_USING (TIMER4_ISR, TIMER4_IRQn, 1)
 196          {
 197   1        static uint16_t phaseAcc = 0;       // Holds phase accumulator
 198   1      
 199   1        SI_UU16_t temp;   // The temporary value that holds
 200   1                                                                                // value before being written
 201   1                                                                                // to the DAC
 202   1      
 203   1        TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;    // Clear Timer4 overflow flag
 204   1      
 205   1        phaseAcc += phaseOffset;            // Increment phase accumulator
 206   1      
 207   1        // Read the table value
 208   1        temp.u16 = currentTable[phaseAcc >> 8];
 209   1      
 210   1        // Set the value of <temp> to the next output of DAC at full-scale
 211   1        // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 212   1        // written first.
 213   1      
 214   1        SFRPAGE = PG4_PAGE;
 215   1      
 216   1        DAC1L = DAC0L = temp.u8[LSB];
 217   1        DAC1H = DAC0H = temp.u8[MSB];
 218   1      }
 219          //
 220          ////-----------------------------------------------------------------------------
 221          //// PMATCH_ISR
 222          ////-----------------------------------------------------------------------------
 223          ////
 224          //// The Port Match interrupt occurs whenever (Pn & PnMASK) != (PnMAT & PnMASK).
 225          //// We must disable the interrupt and wait until the button is released in
 226          //// main, or else the interrupt will trigger multiple times.  It is generally
 227          //// not good practice to sit in an ISR for int32_t periods of time.
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 5   

 228          ////
 229          
 230          uint8_t scrollup(int pos,int end)
 231          {
 232   1              DISP_ClearAll();
 233   1              if (pos!=0)
 234   1              {
 235   2                      int index;
 236   2                      int temp=pos;
 237   2                      if(end-pos+1>=16){
 238   3                              for (index=0;pos<(temp+16);index++){
 239   4                                      sprintf(text1,"%s",input1[pos-1]);
 240   4                                      drawScreenText1(text1,8*index,0);
 241   4                                      pos++;
 242   4                              }
 243   3                      }
 244   2                      else{
 245   3                              for (index=0;pos<end;index++){
 246   4                                      sprintf(text1,"%s",input1[pos-1]);
 247   4                                      drawScreenText1(text1,8*index,0);
 248   4                                      pos++;
 249   4                              }
 250   3                      }
 251   2                      pos=temp-1;
 252   2              }
 253   1              return pos;
 254   1      }
 255          
 256          uint8_t scrolldown(int pos,int end)
 257          {
 258   1              int index;
 259   1                      int temp=pos;
 260   1                      DISP_ClearAll();
 261   1                      if(end-pos+1>16){
 262   2                              for (index=0;pos<(temp+16);index++){
 263   3                                      pos++;
 264   3                                      sprintf(text1,"%s",input1[pos]);
 265   3                                      drawScreenText1(text1,8*index,0);
 266   3                              }
 267   2                      }
 268   1                      else{
 269   2                              for (index=0;pos<end;index++){
 270   3                                      pos++;
 271   3                                      sprintf(text1,"%s",input1[pos]);
 272   3                                      drawScreenText1(text1,8*index,0);
 273   3                              }
 274   2                      }
 275   1      
 276   1                      pos=temp+1;
 277   1                      return pos;
 278   1      }
 279          
 280          SI_INTERRUPT (CMP0_ISR, CMP0_IRQn) {
 281   1      
 282   1              LED1=0;
 283   1      }
 284          
 285          SI_INTERRUPT (PMATCH_ISR, PMATCH_IRQn) {
 286   1              //LED1=1;LED2=0;
 287   1      
 288   1      //      if (dir == JOYSTICK_N) {
 289   1      //              //get line up
 290   1      //              JN=true;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 6   

 291   1      //              itrp=1;
 292   1      //      }
 293   1      //      else if (dir == JOYSTICK_S) {
 294   1      //              JS=true;
 295   1      //              itrp=1;
 296   1      //      }
 297   1              if (BTL==0) {
 298   2                      //get line up
 299   2                      JN=true;
 300   2                      itrp=1;
 301   2              }
 302   1              else if (BTR==0) {
 303   2                      JS=true;
 304   2                      itrp=1;
 305   2              }
 306   1      
 307   1      }
 308          ///////////////////////////////////////////////////////////////////////////////
 309          // Driver Function
 310          ///////////////////////////////////////////////////////////////////////////////
 311          
 312          void FunctionGenerator_main(void)
 313          {
 314   1        //drawSplash();
 315   1              text1[16]=0;
 316   1              //inputchar[1]=0;
 317   1        //DISP_ClearAll();
 318   1       // drawScreenStaticSprites();
 319   1              //LED1=1;LED2=0;
 320   1        while(1)
 321   1        {
 322   2          //processInput(getWaitJoystick());
 323   2          //drawScreen();
 324   2          //synchFrame();
 325   2      
 326   2                while(i<200){
 327   3                        if(i<16)
 328   3                        {
 329   4                                ori=0;
 330   4                                for(i=0;i<16;i++)
 331   4                                        {
 332   5                                                for(j=0;j<21;j++)
 333   5                                                {
 334   6                                                        input1[i][j]=NULL;
*** WARNING C260 IN LINE 334 OF /Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/src/function_generator.c: '=
             -': pointer truncation
 335   6                                                        input1[i][21]=0;
 336   6                                                }
 337   5                                                sprintf(text1,"");
 338   5                                                for(j=0;j<21;j++)
 339   5                                                {
 340   6                                                inputchar = getchar();
 341   6                                                input1[i][j]=inputchar;
 342   6                                                sprintf(text1,"%s",input1[i]);
 343   6                                                drawScreenText1(text1,8*i,0);
 344   6                                                flag=i;
 345   6                                                }
 346   5                                                RETARGET_PRINTF ("\n");
 347   5                                        }
 348   4                                k=1;
 349   4                        }
 350   3                        if(i>=16)
 351   3                                {
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 7   

 352   4                                        DISP_ClearAll();
 353   4                                        ori=i/16;
 354   4                                        k++;
 355   4                                        for(;i<k*16;i++){
 356   5                                        for(j=0;j<16;j++)
 357   5                                        {
 358   6                                                input1[i][j]=NULL;
*** WARNING C260 IN LINE 358 OF /Users/liaohu/SimplicityStudio/v4_workspace/Final project_1/src/function_generator.c: '=
             -': pointer truncation
 359   6                                                input1[i][16]=0;
 360   6                                        }
 361   5                                sprintf(text1,"");
 362   5                                for(j=0;j<16;j++)
 363   5                                {
 364   6                                        inputchar = getchar();
 365   6                                        input1[i][j]=inputchar;
 366   6                                        sprintf(text1,"%s",input1[i]);
 367   6                                        drawScreenText1(text1,8*(i-(k-1)*16),0);
 368   6      
 369   6                                        flag=i;
 370   6                                                if (flag >16){                //enables multiple laps
 371   7                                                        EIE1 |=0x02;  //re enable
 372   7                                                }
 373   6                                                if(itrp)
 374   6                                                {
 375   7                                                        SFRPAGE = 0x00;              // EIE1 interrupt on SFRPAGE 0x00
 376   7                                                        EIE1 &= ~0x02;           //disable
 377   7                                                        if(JS)
 378   7                                                        {
 379   8                                                              ori=scrollup(ori,flag);
 380   8                                                              JS=false;
 381   8                                                        }
 382   7                                                        else if(JN)
 383   7                                                        {
 384   8                                                              ori=scrolldown(ori,flag);
 385   8                                                              JN=false;
 386   8                                                        }
 387   7                                                        itrp=0;
 388   7                                                        IE_EA=1;
 389   7                                                }
 390   6                                        }
 391   5                                        RETARGET_PRINTF ("\n");
 392   5                                        }
 393   4      
 394   4                                }
 395   3                }
 396   2        }
 397   1      }
 398          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1393    ----
   CONSTANT SIZE    =   8224    ----
   XDATA SIZE       =   1149    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21      37
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/07/2017 00:14:12 PAGE 8   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
